Static
（1）先来介绍它的第一条也是最重要的一条：隐藏。
所有未加static前缀的全局变量和函数都具有全局可见性，其它的源文件也能访问
如果加了static，就会对其它源文件隐藏。例如在a和msg的定义前加上static，main.c就看不到它们了。利用这一特性可以在不同的文件中定义同名函数和同名变量，而不必担心命名冲突。Static可以用作函数和变量的前缀，对于函数来讲，static的作用仅限于隐藏，而对于变量，static还有下面两个作用。
（2）static的第二个作用是保持变量内容的持久
（3）static的第三个作用是默认初始化为0。其实全局变量也具备这一属性，因为全局变量也存储在静态数据区。在静态数据区，内存中所有的字节默认值都是0x00，某些时候这一特点可以减少程序员的工作量。
指针
	对于指针和指针变量，我们首先要认识它的实质，它的功能。它的实质是内存单元的地址，它的功能是实现数据的间接访问，
然后开始用指针，就是要通过指针变量灵活的操作内存。第一，先要定义和初始化一个指针变量，必须要符合规则，这个规则规定了指针只能访问的数据类型，指针一开始落在哪一个内存单元，要避免出现“野指针”。第二，用指针访问数据，要注意我们访问数据的位宽，要注意我们访问数据的位置。对指针的运算，指针的变化是以数据个数计量的，也就是说，如果指针+n，意味着指针跳过了内存单元数量=n*数据宽度。指针和NULL空指针的等于或不等于关系运算非常普通，NULL及0是C语言标准规定的唯一的指针常量，它规定该指针不指向任何对象，并且0号地址是被禁止访问的。
关于数组和指针。第一，数组是有一定顺序关系的若干个变量的集合，占用连续的存储空间，这些变量，我们叫做是数组元素，&a[2]表示数组a的第3个元素起始地址。第二，数组的指针是个常量，它的特殊性在于它是数组元素的地址，也就意味着，在程序运行过程中，无法动态改变。第三，二维数组，相对于一位数组而言，它增加了一个中间层，我们叫做行，比如a[3][3]，a[1]就是是“编号”1行，同时我们使用一个指针变量p=a，那么有p+1=a+1=a[1]=&a[1][0]，那么“编号”1行第1号元素又可表示成 *(p+1)+1，*(a+1)+1，a[1]+1，进而，“编号”1行第1号元素就是*(*(p+1)+1)，*(*(a+1)+1)，*( a[1]+1), a[1][1]。到这里，我们引入行指针：int (*p)[3]。
多级指针，比如二级指针变量指向一级指针变量，在32bit机器平台上，指针变量占4个字节内存，指针变量+n运算，它的移动是以目标变量为单位进行，那么对于多级指针变量总是移动4个字节。
Const与指针，常量化指针目标表达式，这会限制通过指针来改变目标，也就意味着，我们只能够读该位置的值而不能够改变这个位置的值。常量化指针变量，这使得指针变量不能被修改，但可以改变该位置的值。
Void指针是指向不确定数据类型的指针变量，我们不能直接使用它，必须要强加给他一个类型属性后才能使用。
 	
函数
对于函数，我们首先要认识它的格式和它的功能，格式包含它的命名，它的形式参数列表，它的返回值，功能则描述了它实现的任务。
然后开始用这个函数，也就是调用函数，实际上就是传递数据到函数以实现主调函数所要求的功能，第一，先要有这个函数的声明，我们俗称是“函数原型”，它的作用是以通知编译系统对调用函数的合法性进行全面的检查。第二，函数调用的方式总共三种，分别是函数语句，函数表达式，函数参数。第三，传递数据要求符合参数列表规则，这个规则规定了数据的数量，类型和排序等。第四，传递数据的方式主要有值传递，地址传递，数组传递，指针传递，全局变量传递（尽量避免）。关于值传递，是传递数据本身，可以以多种方式给出这个数据，比如变量，表达式和函数等，调用函数终究不改变实参。关于地址传递，是传递数据地址，这时，调用函数可以改变实参。
指针函数，是一类返回指针类型数据的函数，并且要注意，返回的指针是为主调函数所能访问的。一般，函数能返回下面3中内存地址，一个是静态变量的地址，一个是字符串常量的地址，一个是堆的地址。
函数指针变量和函数指针数组。
用户自定义数据类型
	关于结构体，我们要认识它的格式和它的功能，它的使用。结构的功能是起到信息包装的作用，程序员直接看得见的是信息的外包装。
	首先，结构是任意个任意类型数据相互联系构成的一个有机整体。属于用户自定义数据类型，定义之后，地位和普通数据类型一样。我们有3种方式声明和初始化一个结构类型变量，1，先定义类型后声明和初始化。2，定义类型时就声明和初始化。另外同类型结构变量可以相互赋值。相应的，我们可以声明一个结构数组变量，结构指针变量。这个时候，结构充当一个中间层的角色，它包装了一些底层的信息。3，直接声明和初始化。我们使用结构变量的方法是用他的最低级成员，而不能用它本身。4，特别的，位域是一种特殊的结构，这种结构的成员是由一个字节划分出来的若干位，它的名称及域名可以没有，这个域则是空的，不能被使用，同时，位域不能跨字节分配，也就是说，如果碰到当前的字节不足够分配该位域时，我们应该使用下一个字节来分配它。
	关于联合，联合在定义，声明和使用上和结构类型，不同在于使用内存空间的方式，联合的各个成员共享内存空间，意味着联合变量大小取决于他的最大成员占用的内存空间，那么这决定了联合使用于特定的场合，这种场合要求不同数据共享内存，但这些数据不会同时被使用。
	关于枚举，在一个问题的描述当中，有些数据只有有限个可能，那么这时，我们把他包装起来，这就是枚举，枚举类型变量的各个成员是整型范围内的值，是常量。
内存管理
	内存的分配是指系统提供出一块存储区来进行数据存储。内存的释放是指系统收回一块存储区，那么先要把存储的数据清除。
	我们先要了解内存实际的情况和内存的管理模式，在C语言里面，内存的情况是，划分为4个区，一类是代码区，这里存储程序的代码，一个区是全局变量和静态变量区，这个区在程序编译时被使用，程序运行结束时被释放。一个区是栈，函数运行时，被使用，函数运行结束时，被释放。一个区是堆，这个区在程序运行时被使用，由程序员决定什么时候被释放。
	我们使用动态内存，要特别的谨慎和细心。避免产生“野指针”。野指针产生的原因有下面几种，一种是未初始化，一种是，释放了内存后，相应的指针没有被处理，本应该要赋值为NULL。一种是指针操作超过了变量的作用范围。一种是指针函数返回栈内存
	讲到这里来了，我们在用指针的时候，应该考虑到如下的因素：
1，	指针位于哪个区？
2，	是否获得这个区上的一块内存来处理数据？
3，	这块内存是在什么时候开始获得，和在什么时候被收回？


补码移位的过程？
1，	先用它的原码来表示,。2，
2，	原码的数值部分移动，符号部分不移动
3，	又用补码表示
